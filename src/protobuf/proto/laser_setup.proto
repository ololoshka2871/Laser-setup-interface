syntax = "proto2";

package ru.sktbelpa.laser_setup;

enum INFO {
    // верися этого протокола
    PROTOCOL_VERSION = 2;

    // идентификатор стенда
    LASER_SETUP_ID = 0xE008;

    // ИД, преднозначенный для поиска
    ID_DISCOVER = 0xFFFF;

	// магическое число для режима MDProtobuf
    MAGICK = 0x09;
}

// код выполнения операции
enum STATUS {
    // успешное завершение
    OK = 0;

    // недопустимое значение поля
    ERRORS_IN_SUBCOMMANDS = 1;

    // I2C error
    I2C = 20;

    PROTOCOL_ERROR = 100;
}

//-----------------------------------------------------------------------------

// Общий запрос для поиска
message Request {
    // Идентификатор запроса. Служит для определения пары запрос/ответ
    required uint32             id = 1;
    // id устройства (идентификация)
    required uint32             deviceID = 2;
    // версия протокола запрашивающего
    required uint32             protocolVersion = 3;

    // Запрос управления
    optional ControlRequest     control = 20;

    // Запрос действия по I2C
    optional I2CRequest         i2c = 40;
}

// Общий ответ сервера
message Response {
    // Идентификатор запроса, которому соответствует этот ответ
    required uint32             id = 1;
    // id устройства
    required uint32             deviceID = 2;
    // версия протокола с которой работает устройство
    required uint32             protocolVersion = 3;
    // общий статус выполнения
    required STATUS             Global_status = 4;
    // таймштамп устройства, когда фактически был сгененрирован ответ
    required fixed64            timestamp = 5;

    // Статус управления
    optional ControlResponse    control = 20;

    // Ответ действия по I2C
    optional I2CResponse        i2c = 40;
}

//-----------------------------------------------------------------------------

enum ActuatorState {
    // Камера закрыта
    Close = 0;
    // Камера открыта
    Open = 1;
}

enum ValveState {
    // Камера соединена с атмосферой
    Atmosphere = 0;
    // Камера соединена с вакуумным насосом
    Vacuum = 1;
}

message ControlRequest {
    // Управление актуатором
    optional ActuatorState    actuator_state = 1;
    // Управление клапаном
    optional ValveState       valve_state = 2;
    // Выбор канала
    optional uint32           select_channel = 3;

}

message ControlResponse {
    // Статус актуатора
    required ActuatorState    actuator_state = 1;
    // Статус клапана
    required ValveState       valve_state = 2;
    // Выбранный канал
    required uint32           selected_channel = 3;
}

//-----------------------------------------------------------------------------

message I2CRequest {
    oneof Request {
        // запрос на перечисление устройств
        Empty           Enumerate = 1; 

        // операции чтения/записи
        I2CSequence     Sequence = 2;
    }
}

message I2CResponse {
    oneof Response {
        // Перечисление устройств
        I2CEnumerateResponse    Enumerate = 1;

        // результаы операций чтения/записи
        I2CSequenceResult       Sequence = 2;
    }
}

message I2CBus {
    // bus id
    required uint32 bus = 1;
    // supported speed max
    required uint32 max_speed = 2;
};

message I2CEnumerateResponse {
    // список шин
    repeated I2CBus buses = 1;
}

message I2CSequence {
    // bus id
    required uint32 bus = 1;
    // slave address
    required uint32 address = 2;
    
    repeated I2COperation Operations = 3;
}

message I2COperation {
    oneof Operation {
        // запись
        I2CWriteRequest Write = 1;
        // чтение
        I2CReadRequest  Read = 2;
    }
}

message I2CSequenceResult {
    // bus id
    required uint32 bus = 1;
    // slave address
    required uint32 address = 2;
    
    repeated I2CResult Operations = 3;
}

message I2CResult {
    oneof Operation {
        // запись
        I2CResultCode Write = 1;
        // чтение
        I2CReadResponse  Read = 2;
    }
}

enum I2CResultCode {
    // успешное завершение
    I2C_OK = 0;
    // invalid bus
    I2C_INVALID_BUS = 1;
    // too long data
    I2C_TOO_LONG_DATA = 2;
    // I2C_NAK
    I2C_NAK = 20;
}

message I2CWriteRequest {
    // slave address
    required uint32 address = 2;
    // data
    required bytes  data = 3;
}

message I2CReadRequest {
    // slave address
    required uint32 address = 2;
    // data
    required uint32 length = 3;
}

message I2CReadResponse {
    // data
    required bytes  data = 3;
    // status
    required I2CResultCode status = 4;
}

//-----------------------------------------------------------------------------

// пустое сообщение - плейсхолдер
message Empty {}